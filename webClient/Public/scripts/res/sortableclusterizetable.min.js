(function($) {
    $.fn.sortableClusterizeTable = function(methodsOrOptions) {
        var renderTable = function() {
            var settings = $(this).data('clusterize-settings');
            var clusterize = $(this).data('clusterize');

            // sort data
            var data = settings.data;
            if (settings.sortable) {
                var sortFn = $.fn.sortableClusterizeTable.default_sort_fns[settings.sortInfo.dataType];
                var sortValueFn = settings.sortInfo.valueFns[settings.sortInfo.column];

                if (settings.hasOwnProperty('secondSortInfo')) {
                    var secondSortFn = $.fn.sortableClusterizeTable.default_sort_fns[settings.secondSortInfo.dataType];
                    var secondValueFn = settings.secondSortInfo.sortFn;
                }

                if (settings.hasOwnProperty('thirdSortInfo')) {
                    var thirdSortFn = $.fn.sortableClusterizeTable.default_sort_fns[settings.thirdSortInfo.dataType];
                    var thirdValueFn = settings.thirdSortInfo.sortFn;
                }

                if (sortFn && typeof sortValueFn !== 'undefined') {
                    data.sort( function(a, b) {
                        if (settings.sortInfo.direction === $.fn.sortableClusterizeTable.dir.ASC) {
                            var res = sortFn(sortValueFn(a), sortValueFn(b));
                        }
                        else {
                            res = sortFn(sortValueFn(b), sortValueFn(a));
                        }

                        if (res === 0 && 
                            typeof secondSortFn !== 'undefined' && 
                            typeof secondValueFn !== 'undefined') {

                            if (settings.secondSortInfo.direction === $.fn.sortableClusterizeTable.dir.ASC) {
                                res = secondSortFn(secondValueFn(a), secondValueFn(b));
                            }
                            else {
                                res = secondSortFn(secondValueFn(b), secondValueFn(a));
                            }

                            if (res === 0 && 
                                typeof thirdSortFn !== 'undefined' && 
                                typeof thirdValueFn !== 'undefined') {

                                if (settings.thirdSortInfo.direction === $.fn.sortableClusterizeTable.dir.ASC) {
                                    res = thirdSortFn(thirdValueFn(a), thirdValueFn(b));
                                }
                                else {
                                    res = thirdSortFn(thirdValueFn(b), thirdValueFn(a));
                                }
                                return res;
                            }
                            else {
                                return res;
                            }
                        }
                        else {
                            return res;
                        }
                    });
                }
            }

            var $scrollArea = $('#' + settings.scrollId);
            var $table = $scrollArea.find('.clusterizeTable');
            var isScrollAtBottom = ($scrollArea.scrollTop() >= $table.height() - $scrollArea.height());

            // render table
            var html_array = [];
            for (var i = 0; i < data.length; i++) {
                var item = data[i];
                var html = settings.generateRowHtml(item);
                if (html) {
                    html_array.push(html);
                }
            }
            clusterize.update(html_array);

            // scroll bottom
            if (settings.scrollToBottom && isScrollAtBottom) {
                var offset = Math.max(0, $table.height() - $scrollArea.height());
                $scrollArea.scrollTop(offset);
            }
        };

        var sortTable = function (index, dataType, sortDefaultDir) {
            var settings = $(this).data('clusterize-settings');
            var sortValueFn = settings.sortInfo.valueFns[index];
            if (sortValueFn === null) return;

            var sortFn = $.fn.sortableClusterizeTable.default_sort_fns[dataType];
            if (typeof sortFn === 'undefined') return;

            var dir = $.fn.sortableClusterizeTable.dir;
            if (settings.sortInfo.column !== index) {
                var sortDir = sortDefaultDir || dir.ASC;
            }
            else {
                sortDir = settings.sortInfo.direction === dir.ASC ? dir.DESC : dir.ASC;
            }

            settings.sortInfo.column = index;
            settings.sortInfo.direction = sortDir;
            settings.sortInfo.dataType = dataType;

            $(this).data('clusterize-settings', settings);

            renderTable.apply(this);
        }

        var methods = {
            init: function(options) {
                var settings = $.extend({
                    generateRowHtml: function() {},
                    data: [],
                    scrollId: '',
                    contentId: '',
                    rows_in_block: 10,
                    scrollToBottom: false,
                    sortable: false,
                    hasHorizontalScrollBar: false
                }, options);

                $(this).data('clusterize-settings', settings);

                // initialize clusterize tabler
                clusterize = new Clusterize({
                    rows: [],
                    scrollId: settings.scrollId,
                    contentId: settings.contentId,
                    rows_in_block: settings.rows_in_block,
                    show_no_data_row: false,
                    callbacks: {
                        clusterWillChange: function() {
                            if (options.hasOwnProperty('clusterWillChange')) {
                                options.clusterWillChange();
                            }
                        },
                        clusterChanged: function() {
                            if (options.hasOwnProperty('clusterChanged')) {
                                options.clusterChanged();
                            }
                        },
                        scrollingProgress: function(perc) {
                            if (options.hasOwnProperty('scrollingProgress')) {
                                options.scrollingProgress(perc);
                            }
                        }
                    }
                });
                $(this).data('clusterize', clusterize);

                if (settings.sortable === true) {
                    var $that = $(this);
                    var $headerTable = $(this).find('.headTable');
                    $headerTable.on('click', 'thead th', function() {
                        var dataType = $(this).data('sort');
                        if (typeof dataType !== 'undefined') {
                            sortTable.apply($that, [$(this).index(), dataType, $(this).data('sort-default')]);
                        }
                    });
                }

                renderTable.apply(this);

                if (settings.hasHorizontalScrollBar === true) {
                    var $scrollArea = $('#' + settings.scrollId);
                    $scrollArea.on('scroll', function () {
                        var headerTable = $(this).closest('.clusterize').find('.headTable');
                        headerTable.css({left: - $(this).scrollLeft()});
                    });
                }
            },
            update: function(data) {
                var clusterize = $(this).data('clusterize');
                clusterize.clear();
                var settings = $(this).data('clusterize-settings');
                settings.data = data;
                $(this).data('clusterize-settings', settings);
                renderTable.apply(this);
            },
            prepend: function(data) {
                var settings = $(this).data('clusterize-settings');
                settings.data = data.concat(settings.data);
                $(this).data('clusterize-settings', settings);
                renderTable.apply(this);
            },
            merge: function(data, key) {
                var settings = $(this).data('clusterize-settings');
                settings.data = _.unionBy(settings.data, data, key);
                $(this).data('clusterize-settings', settings);
                renderTable.apply(this);
            },
            append: function(data) {
                var settings = $(this).data('clusterize-settings');
                settings.data = settings.data.concat(data);
                $(this).data('clusterize-settings', settings);
                renderTable.apply(this);
            },
            load: function(index) {
                //This mothod works only when table rows have same height
                var settings = $(this).data('clusterize-settings');
                var $scrollArea = $('#' + settings.scrollId);
                var rowHeight = $scrollArea.find('tbody tr:nth-child(2)').height();
                $scrollArea.scrollTop(rowHeight * index);
            },
            getData: function() {
                var settings = $(this).data('clusterize-settings');
                return settings.data;
            },
            size: function() {
                var settings = $(this).data('clusterize-settings');
                return settings.data.length;
            },
            isInitialized: function() {
                return (typeof $(this).data('clusterize-settings') != 'undefined');
            }
        }
        if (methods[methodsOrOptions]) {
            return methods[methodsOrOptions].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof methodsOrOptions === 'object' || ! methodsOrOptions) {
            return methods.init.apply(this, arguments);
        }
    };

    // ------------------------------------------------------------------
    // Default settings
    // ------------------------------------------------------------------
    $.fn.sortableClusterizeTable.dir = {ASC: "asc", DESC: "desc"};
    $.fn.sortableClusterizeTable.default_sort_fns = {
        "int": function(a, b) {
            return parseInt(a, 10) - parseInt(b, 10);
        },
        "float": function(a, b) {
            return parseFloat(a) - parseFloat(b);
        },
        "string": function(a, b) {
            return a.localeCompare(b);
        },
        "string-ins": function(a, b) {
            a = a.toLocaleLowerCase();
            b = b.toLocaleLowerCase();
            return a.localeCompare(b);
        },
        "timestamp" : function (a, b) {
            return a - b;
        },
        "full_date" : function (a, b) {
            return moment(a, 'ddd DD-MM hh:mm').valueOf() - moment(b, 'ddd DD-MM hh:mm').valueOf();
        },
        "money" : function (a, b) {
            var numberA = a.substring(1).replace(',', '');
            var numberB = b.substring(1).replace(',', '');
            numberA = parseFloat(numberA);
            numberB = parseFloat(numberB);

            return (isNaN(numberA) ? 0 : numberA) - (isNaN(numberB) ? 0 : numberB);
        },
        "money_short" : function (a, b) {
            var numberA = a.substring(1).replace(',', '').toLowerCase();
            var numberB = b.substring(1).replace(',', '').toLowerCase();

            return getValueFromShortNumber(numberA) - getValueFromShortNumber(numberB);
        },
        "entries" : function (a, b) {
            a += '/';
            b += '/';
            var entriesA = a.substring(0, a.indexOf('/'));
            var entriesB = b.substring(0, b.indexOf('/'));

            return parseInt(entriesA) - parseInt(entriesB);
        },
        "percentage" : function (a, b) {
            return parseFloat(a.replace('%', '')) - parseFloat(b.replace('%', ''));
        },
        "formation" : function (a, b) {
            var weights = [];

            for (var i = 0; i < 2; i++) {
                weights[i] = shortPositionOrdinal(i === 0 ? a : b);
            }

            return weights[0] - weights[1];
        },
        "number" : function (a, b) {
            var numberA = a.replace(',', '').toLowerCase();
            var numberB = b.replace(',', '').toLowerCase();

            return getValueFromShortNumber(numberA) - getValueFromShortNumber(numberB);
        }
    };
})(jQuery);